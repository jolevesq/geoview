{"version":3,"file":"corePackages/geoview-footer-panel.js","mappings":";wkDAQMA,EAAIC,OAOH,SAASC,EAAY,GAA+B,IAA7BC,EAAK,EAALA,MACpBC,EAASJ,EAATI,KACAC,EAAeD,EAAfC,IAAKC,EAAUF,EAAVE,MAELC,EAAwBD,EAAxBC,SAAUC,EAAcF,EAAdE,UAElB,EAA8BD,EAA+B,CAAC,CAAEE,UAAW,GAAIC,UAAW,GAAIC,SAAU,MAAM,eAAvGC,EAAO,KAAEC,EAAU,KAE1B,EAAwBN,IAAqD,eAAtEO,EAAI,KAAEC,EAAO,KAuCpB,OArCAP,GAAU,WAmBR,OAjBAH,EAAIW,MAAMC,GACRZ,EAAIa,WAAWC,iBAAiBC,kBAChC,SAACC,GACC,IAAIC,EAAAA,EAAAA,KAAwBD,GAAU,CACpC,IAAQE,EAAeF,EAAfE,WACFC,EAAmC,GACzCC,OAAOC,KAAKH,GAAYI,SAAQ,SAAClB,GAC/B,IAAMC,GAAYkB,EAAAA,EAAAA,KAAkBvB,EAAIwB,IAAI1B,GAAO2B,MAAMC,iBAAiBtB,GAAWC,UAAWP,GAC1FQ,EAAWY,EAAWd,GAC5Be,EAAWQ,KAAK,CAAEvB,UAAAA,EAAWC,UAAAA,EAAWC,SAAAA,GAC1C,IACAE,EAAWW,EACb,CACF,GACArB,EAAK,UACFA,EAAK,gBAEH,WACLE,EAAIW,MAAMiB,IAAI5B,EAAIa,WAAWC,iBAAiBC,iBAAkBjB,EAClE,CAEF,GAAG,IASHK,GAAU,WACRO,EAAQV,EAAIwB,IAAI1B,GAAOS,QAAQsB,cAAc/B,EAAOS,GAEtD,GAAG,CAACA,KAEG,yBAAME,GACf,C,wbChDA,IAAMd,EAAIC,OAUJkC,EAAiB,oCAIrB,WAAYC,EAAkBC,GAA0B,MAE9B,OAF8B,eACtD,cAAMD,EAAUC,IAAO,4BAShB,kBAAuBC,CAAM,wCAOtB,kBAAsBC,EAAAA,EAAAA,KAAaC,EAAc,uCAKlDD,EAAAA,EAAAA,KAAa,CAC1BE,GAAI,CACFC,OAAQ,SACR9B,QAAS,UACT+B,SAAU,QAEZC,GAAI,CACFF,OAAQ,UACR9B,QAAS,UACT+B,SAAU,eAEZ,2BAKM,WACN,iBAAQE,EAAS,EAATA,UAEA1C,EAFsB,EAAX2C,YAEX3C,MAGAC,EAASJ,EAATI,KAER,GAAIA,EAAM,CAER,IAAQC,EAAQD,EAARC,IACA0C,EAAoB1C,EAAIwB,IAAI1B,GAA5B4C,gBACAC,EAAe3C,EAAIwB,IAAI1B,GAAvB6C,WAEFC,EAAcJ,aAAS,EAATA,EAAWK,KAAKD,YAChCE,EAAc,EAEdF,EAAYG,SAAS,YAEvBJ,EAAWK,gBAAgB,CACzBC,MAAOH,EACPI,MAAO,EAAKC,aAAaT,GAAiBL,OAC1Ce,QAAS,kBAAMpD,EAAIwB,IAAI1B,GAAOuC,OAAOgB,aAAa,CAAEC,SAAU,CAAC,oBAAqB,IAEtFR,KAMEF,EAAYG,SAAS,aAEvBJ,EAAWK,gBAAgB,CACzBC,MAAOH,EACPI,MAAO,EAAKC,aAAaT,GAAiBnC,QAC1C6C,QAAS,kBAAM,SAACvD,EAAW,CAACC,MAAOA,GAAS,IAE9CgD,KAGEF,EAAYG,SAAS,eAEvBJ,EAAWK,gBAAgB,CACzBC,MAAOH,EACPI,MAAO,EAAKC,aAAaT,GAAiBJ,SAC1Cc,QAAS,kBAAMpD,EAAIwB,IAAI1B,GAAOwC,SAASiB,eAAe,CAAEC,QAAS,mBAAoB,IAEvFV,KAMF,IADA,IAAMW,EAAajB,aAAS,EAATA,EAAWK,KAAKY,WAC1BC,EAAI,EAAGA,EAAID,EAAWE,OAAQD,IAAK,CAC1C,IAAME,EAAMH,EAAWC,GAEvBf,EAAWK,gBAAgB,CACzBC,MAAOH,EACPI,MAAOU,EAAIC,MACXT,QAASQ,EAAIE,cAEfhB,GACF,CACF,CACF,IApGE,EAAKiB,YAAc,KAAK,CAC1B,CAmHC,OAjHD,+BAsGA,WAImBpE,EAATI,IAOV,KAAC,EA1HoB,CAASiE,EAAAA,KA+HhCrE,EAAEsE,QAAUtE,EAAEsE,SAAW,CAAC,EAC1BtE,EAAEsE,QAAQ,iBAAkBC,EAAAA,EAAAA,KAAqBpC,E","sources":["webpack://geoview-core/../geoview-footer-panel/src/details-item.tsx","webpack://geoview-core/../geoview-footer-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\nimport { DetailedReactHTMLElement } from 'react';\n\nimport { TypeWindow, payloadIsAllQueriesDone, TypeArrayOfLayerData, getLocalizedValue } from 'geoview-core';\n\ninterface Props {\n  mapId: string;\n}\nconst w = window as TypeWindow;\n\n/**\n * Create an element that displays the details component\n *\n * @returns {JSX.Element} created details component\n */\nexport function DetailsItem({ mapId }: Props): JSX.Element {\n  const { cgpv } = w;\n  const { api, react } = cgpv;\n\n  const { useState, useEffect } = react;\n\n  const [details, setDetails] = useState<TypeArrayOfLayerData>([{ layerPath: '', layerName: '', features: [] }]);\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const [list, setList] = useState<DetailedReactHTMLElement<{}, HTMLElement>>();\n\n  useEffect(() => {\n    // create the listener to return the details\n    api.event.on(\n      api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE,\n      (payload) => {\n        if (payloadIsAllQueriesDone(payload)) {\n          const { resultSets } = payload;\n          const newDetails: TypeArrayOfLayerData = [];\n          Object.keys(resultSets).forEach((layerPath) => {\n            const layerName = getLocalizedValue(api.map(mapId).layer.registeredLayers[layerPath].layerName, mapId)!;\n            const features = resultSets[layerPath]!;\n            newDetails.push({ layerPath, layerName, features });\n          });\n          setDetails(newDetails);\n        }\n      },\n      mapId,\n      `${mapId}-DetailsAPI`\n    );\n    return () => {\n      api.event.off(api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE, mapId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // useEffect(() => {\n  //   setDetails({\n  //     layerName: 'This is the layer',\n  //     features: layerSet.resultSets['esriFeatureLYR4/8'] !== undefined ? layerSet.resultSets['esriFeatureLYR4/8'] : [],\n  //   });\n  // }, [layerSet]);\n\n  useEffect(() => {\n    setList(api.map(mapId).details.createDetails(mapId, details));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [details]);\n\n  return <div>{list}</div>;\n}\n","import {\n  Cast,\n  AbstractPlugin,\n  TypePluginOptions,\n  TypeButtonPanel,\n  TypeWindow,\n  toJsonObject,\n  TypeJsonObject,\n  AnySchemaObject,\n} from 'geoview-core';\n\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-footer-panel.json';\nimport { DetailsItem } from './details-item';\n\nconst w = window as TypeWindow;\n\ntype CustomTabs = {\n  title: string;\n  contentHTML: string;\n};\n\n/**\n * Create a class for the plugin instance\n */\nclass FooterPanelPlugin extends AbstractPlugin {\n  // store the created button panel object\n  buttonPanel: TypeButtonPanel | null;\n\n  constructor(pluginId: string, props: TypePluginOptions) {\n    super(pluginId, props);\n    this.buttonPanel = null;\n  }\n\n  /**\n   * Return the package schema\n   *\n   * @returns {AnySchemaObject} the package schema\n   */\n  schema = (): AnySchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations = toJsonObject({\n    en: {\n      legend: 'Legend',\n      details: 'Details',\n      dataGrid: 'Data',\n    },\n    fr: {\n      legend: 'Légende',\n      details: 'Détails',\n      dataGrid: 'Données',\n    },\n  });\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added = (): void => {\n    const { configObj, pluginProps } = this;\n\n    const { mapId } = pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      const { api } = cgpv;\n      const { displayLanguage } = api.map(mapId);\n      const { footerTabs } = api.map(mapId);\n\n      const defaultTabs = configObj?.tabs.defaultTabs as Array<string>;\n      let tabsCounter = 0;\n\n      if (defaultTabs.includes('legend')) {\n        // create new tab and add the LegendComponent to the footer tab\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: this.translations[displayLanguage].legend as string,\n          content: () => api.map(mapId).legend.createLegend({ layerIds: ['esriFeatureLYR4'] }),\n        });\n        tabsCounter++;\n      }\n\n      // create the listener to return the details\n      // TODO: layer path are not define when layer is created, no result are assigned\n      // const myLayerSet = api.createFeatureInfoLayerSet(mapId, `${mapId}resultSetId`);\n      if (defaultTabs.includes('details')) {\n        // the call to create details element return the element and the footer content is waiting for a function.\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: this.translations[displayLanguage].details as string,\n          content: () => <DetailsItem mapId={mapId} />,\n        });\n        tabsCounter++;\n      }\n\n      if (defaultTabs.includes('data-grid')) {\n        // the call to create data grid element return the element and the footer content is waiting for a function.\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: this.translations[displayLanguage].dataGrid as string,\n          content: () => api.map(mapId).dataGrid.createDataGrid({ layerId: 'esriFeatureLYR4' }),\n        });\n        tabsCounter++;\n      }\n\n      // TODO add custom detail reusable component when done\n\n      const customTabs = configObj?.tabs.customTabs as Array<string>;\n      for (let i = 0; i < customTabs.length; i++) {\n        const tab = customTabs[i] as unknown as CustomTabs;\n\n        footerTabs.createFooterTab({\n          value: tabsCounter,\n          label: tab.title,\n          content: tab.contentHTML,\n        });\n        tabsCounter++;\n      }\n    }\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    // const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    if (cgpv) {\n      // access the api calls\n      // const { api } = cgpv;\n      // TODO: Enable the footer tabs removal\n    }\n  }\n}\n\nexport default FooterPanelPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['footer-panel'] = Cast<AbstractPlugin>(FooterPanelPlugin);\n"],"names":["w","window","DetailsItem","mapId","cgpv","api","react","useState","useEffect","layerPath","layerName","features","details","setDetails","list","setList","event","on","eventNames","GET_FEATURE_INFO","ALL_QUERIES_DONE","payload","payloadIsAllQueriesDone","resultSets","newDetails","Object","keys","forEach","getLocalizedValue","map","layer","registeredLayers","push","off","createDetails","FooterPanelPlugin","pluginId","props","schema","toJsonObject","defaultConfig","en","legend","dataGrid","fr","configObj","pluginProps","displayLanguage","footerTabs","defaultTabs","tabs","tabsCounter","includes","createFooterTab","value","label","translations","content","createLegend","layerIds","createDataGrid","layerId","customTabs","i","length","tab","title","contentHTML","buttonPanel","AbstractPlugin","plugins","Cast"],"sourceRoot":""}