{"version":3,"file":"corePackages/geoview-config.js","mappings":"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","sources":["webpack://geoview-core/../geoview-config/src/localStorage.ts","webpack://geoview-core/../geoview-config/src/logger.ts"],"sourcesContent":["/**\n * Helper function to read a number in the local storage and if the\n * key can't be found or is invalid return the default value provided.\n * @param key {string} The key to search for\n * @param defaultValue {number} The default value when not found or error\n * @returns The value as number for the key in the local storage or the default value provided.\n */\nexport const getItemAsNumber = (key: string, defaultValue?: number): number | undefined => {\n  try {\n    // Read key in the local storage\n    const levelValue = localStorage.getItem(key);\n\n    // Read as number\n    const levelValueNumber = Number(levelValue);\n\n    // If set and valid: return it; else default will be returned\n    if (levelValueNumber && !Number.isNaN(levelValueNumber)) return levelValueNumber;\n  } catch (e) {\n    // Failed to read localStorage, eat the exception and continue to set the value to the default\n  }\n\n  // Not found, return default\n  return defaultValue;\n};\n\n/**\n * Helper function to read a number or an array of numbers in the local storage and if the\n * key can't be found or is invalid return the default value provided.\n * @param key {string} The key to search for\n * @param defaultValue {number | number[]} The default value when not found or error\n * @returns The value as number | number[] for the key in the local storage or the default value provided.\n */\nexport const getItemAsNumberOrNumberArray = (key: string, defaultValue?: number | number[]): number | number[] | undefined => {\n  try {\n    // Read key in the local storage\n    const levelValue = localStorage.getItem(key);\n\n    // If the value contains ','\n    if (levelValue?.includes(',')) {\n      // Split and read the numbers\n      return levelValue\n        .split(',')\n        .map((val) => Number(val.trim()))\n        .filter((val) => !!val && !Number.isNaN(val));\n    }\n\n    // Read as number\n    const levelValueNumber = Number(levelValue);\n\n    // If set and valid: return it; else default will be returned\n    if (levelValueNumber && !Number.isNaN(levelValueNumber)) return levelValueNumber;\n  } catch (e) {\n    // Failed to read localStorage, eat the exception and continue to set the value to the default\n  }\n\n  // Not found, return default\n  return defaultValue;\n};\n\n/**\n * Helper function to read a number in the local storage and if the\n * key can't be found or invalid, automatically set the value to the default value provided and return that value.\n * That way, it'll be stored in local storage for future use.\n * @param key {string} The key to search for\n * @param defaultValue {number} The default value to set in the local storage and return when not found or error\n * @returns The value as number for the key in the local storage\n */\nexport const getItemAsNumberSetValue = (key: string, defaultValue: number): number => {\n  // Read key in the local storage\n  const valueFromStorage = getItemAsNumber(key);\n\n  // If found, return it\n  if (valueFromStorage !== undefined) return valueFromStorage;\n\n  // Set it to default\n  localStorage.setItem(key, defaultValue.toString());\n  return defaultValue;\n};\n\n/**\n * Helper function to read a number or a list of numbers in the local storage and if the\n * key can't be found or invalid, automatically set the value to the default value provided and return that value.\n * That way, it'll be stored in local storage for future use.\n * @param key {string} The key to search for\n * @param defaultValue {number | number[]} The default value to set in the local storage and return when not found or error\n * @returns The value as number | number[] for the key in the local storage\n */\nexport const getItemAsNumberOrNumberArraySetValue = (key: string, defaultValue: number | number[]): number | number[] => {\n  // Read key in the local storage\n  const valueFromStorage = getItemAsNumberOrNumberArray(key);\n\n  // If found, return it\n  if (valueFromStorage !== undefined) return valueFromStorage;\n\n  // Set it to default\n  localStorage.setItem(key, defaultValue.toString());\n  return defaultValue;\n};\n","import { isArray } from 'lodash';\nimport { getItemAsNumber, getItemAsNumberOrNumberArraySetValue } from './localStorage';\n\n// The log levels.\n// The most detailed messages. Disabled by default. Only shows if actually running in dev environment, never shown otherwise.\nexport const LOG_TRACE_DETAILED = 1;\n// For tracing useEffect unmounting. Disabled by default. Only shows if running in dev environment or GEOVIEW_LOG_ACTIVE key is set in local storage.\nexport const LOG_TRACE_USE_EFFECT_UNMOUNT = 2;\n// For tracing rendering. Disabled by default. Only shows if running in dev environment or GEOVIEW_LOG_ACTIVE key is set in local storage.\nexport const LOG_TRACE_RENDER = 3;\n// For tracing useCallback. Disabled by default. Only shows if running in dev environment or GEOVIEW_LOG_ACTIVE key is set in local storage.\nexport const LOG_TRACE_USE_CALLBACK = 4;\n// For tracing useMemo. Disabled by default. Only shows if running in dev environment or GEOVIEW_LOG_ACTIVE key is set in local storage.\nexport const LOG_TRACE_USE_MEMO = 5;\n// For tracing useEffect mounting. Disabled by default. Only shows if running in dev environment or GEOVIEW_LOG_ACTIVE key is set in local storage.\nexport const LOG_TRACE_USE_EFFECT = 6;\n// For tracing store subscription events. Disabled by default. Only shows if running in dev environment or GEOVIEW_LOG_ACTIVE key is set in local storage.\nexport const LOG_TRACE_CORE_STORE_SUBSCRIPTION = 8;\n// For tracing api events. Disabled by default. Only shows if running in dev environment or GEOVIEW_LOG_ACTIVE key is set in local storage.\nexport const LOG_TRACE_CORE_API_EVENT = 9;\n// For tracing core functions. Disabled by default. Only shows if running in dev environment or GEOVIEW_LOG_ACTIVE key is set in local storage.\nexport const LOG_TRACE_CORE = 10;\n// Default. For debugging and development. Enabled by default. Only shows if running in dev environment or GEOVIEW_LOG_ACTIVE key is set in local storage.\nexport const LOG_DEBUG = 20;\n// Tracks the general flow of the app. Enabled by default. Shows all the time.\nexport const LOG_INFO = 30;\n// For abnormal or unexpected events. Typically includes errors or conditions that don't cause the app to fail. Enabled by default. Shows all the time.\nexport const LOG_WARNING = 40;\n// For errors and exceptions that cannot be handled. Enabled by default. Shows all the time.\nexport const LOG_ERROR = 50;\n\n// The local storage keys\nconst LOCAL_STORAGE_KEY_ACTIVE = 'GEOVIEW_LOG_ACTIVE';\nconst LOCAL_STORAGE_KEY_LEVEL = 'GEOVIEW_LOG_LEVEL';\n\n// Check if running in dev or if the key is set in the local storage\nconst LOG_ACTIVE = process.env.NODE_ENV === 'development' || !!getItemAsNumber(LOCAL_STORAGE_KEY_ACTIVE);\n\n// Check the logging level and set it to LOG_DEBUG if not found\nconst LOG_LEVEL = getItemAsNumberOrNumberArraySetValue(LOCAL_STORAGE_KEY_LEVEL, LOG_DEBUG);\n\n/**\n * A Console Logger to help out logging information with levels of details.\n */\nexport class ConsoleLogger {\n  // The logging level. The higher the number, the more detailed the log.\n  loggingLevel: number | number[];\n\n  // The active timing markers for the logger.\n  markers: LogMarker = {};\n\n  // The active object(s) trackers for the logger.\n  trackers: LogTracker = {};\n\n  // The interval in ms for the object trackers\n  trackerInterval = 100;\n\n  /**\n   * Constructor\n   * @param {number | number[]} logLevel - Indicate the level of detail for the ConsoleLogger. The higher the number, the more detailed the log.\n   */\n  constructor(logLevel: number | number[]) {\n    // Set the level for the logger so that it logs what we really want to see.\n    this.loggingLevel = logLevel;\n  }\n\n  /**\n   * Logs tracing calls at the highest level of detail.\n   * Only shows if LOG_ACTIVE is true.\n   * @param {unknown[]} messages - The messages to log\n   */\n  logTraceDetailed(...messages: unknown[]): void {\n    // Validate log active\n    if (!LOG_ACTIVE) return;\n    // Redirect\n    this.#logLevel(LOG_TRACE_DETAILED, 'DETAL', 'turquoise', ...messages); // Not a typo, 5 characters for alignment\n  }\n\n  /**\n   * Logging function commonly used in the useEffects to log when a component is being unmounted.\n   * Only shows if LOG_ACTIVE is true.\n   * @param {string} useEffectFunction - The useEffect function identifier\n   * @param {unknown[]} messages - The messages to log\n   */\n  logTraceUseEffectUnmount(useEffectFunction: string, ...messages: unknown[]): void {\n    // Validate log active\n    if (!LOG_ACTIVE) return;\n    // Redirect\n    this.#logLevel(LOG_TRACE_USE_EFFECT_UNMOUNT, 'U_UMT', 'grey', useEffectFunction, ...messages);\n  }\n\n  /**\n   * Logging function commonly used in the rendering to log when a component is being rendered.\n   * Only shows if LOG_ACTIVE is true.\n   * @param {string} component - The component being rendered\n   * @param {unknown[]} messages - The messages to log\n   */\n  logTraceRender(component: string, ...messages: unknown[]): void {\n    // Validate log active\n    if (!LOG_ACTIVE) return;\n    // Redirect\n    this.#logLevel(LOG_TRACE_RENDER, 'RENDR', 'plum', component, ...messages); // Not a typo, 5 characters for alignment\n  }\n\n  /**\n   * Logging function commonly used in the useMemo to log when a value is being memoized.\n   * Only shows if LOG_ACTIVE is true.\n   * @param {string} useMemoFunction - The useCallback function identifier\n   * @param {unknown[]} messages - The messages to log\n   */\n  logTraceUseMemo(useMemoFunction: string, ...messages: unknown[]): void {\n    // Validate log active\n    if (!LOG_ACTIVE) return;\n    // Redirect\n    this.#logLevel(LOG_TRACE_USE_MEMO, 'U_MEM', 'orchid', useMemoFunction, ...messages);\n  }\n\n  /**\n   * Logging function commonly used in the useCallback to log when a callback is being memoized.\n   * Only shows if LOG_ACTIVE is true.\n   * @param {string} useCallbackFunction - The useCallback function identifier\n   * @param {unknown[]} messages - The messages to log\n   */\n  logTraceUseCallback(useCallbackFunction: string, ...messages: unknown[]): void {\n    // Validate log active\n    if (!LOG_ACTIVE) return;\n    // Redirect\n    this.#logLevel(LOG_TRACE_USE_CALLBACK, 'U_CLB', 'darkorchid', useCallbackFunction, ...messages);\n  }\n\n  /**\n   * Logging function commonly used in the useEffects to log when a component is being mounted.\n   * Only shows if LOG_ACTIVE is true.\n   * @param {string} useEffectFunction - The useEffect function identifier\n   * @param {unknown[]} messages - The messages to log\n   */\n  logTraceUseEffect(useEffectFunction: string, ...messages: unknown[]): void {\n    // Validate log active\n    if (!LOG_ACTIVE) return;\n    // Redirect\n    this.#logLevel(LOG_TRACE_USE_EFFECT, 'U_EFF', 'mediumorchid', useEffectFunction, ...messages);\n  }\n\n  /**\n   * Logging function commonly used in the store subscriptions to log when a store has triggered a subscription.\n   * Only shows if LOG_ACTIVE is true.\n   * @param {string} storeSubscription - The store subscription event that was raised\n   * @param {unknown[]} messages - The messages to log\n   */\n  logTraceCoreStoreSubscription(storeSubscription: string, ...messages: unknown[]): void {\n    // Validate log active\n    if (!LOG_ACTIVE) return;\n    // Redirect\n    this.#logLevel(LOG_TRACE_CORE_STORE_SUBSCRIPTION, 'E_STO', 'royalblue', storeSubscription, ...messages);\n  }\n\n  /**\n   * Logging function commonly used in the API event handlers to log when the API has triggered an event.\n   * Only shows if LOG_ACTIVE is true.\n   * @param {string} apiEvent - The api event that was raised\n   * @param {unknown[]} messages - The messages to log\n   */\n  logTraceCoreAPIEvent(apiEvent: string, ...messages: unknown[]): void {\n    // Validate log active\n    if (!LOG_ACTIVE) return;\n    // Redirect\n    this.#logLevel(LOG_TRACE_CORE_API_EVENT, 'E_API', 'cornflowerblue', apiEvent, ...messages);\n  }\n\n  /**\n   * Logs trace information for core processing.\n   * Only shows if LOG_ACTIVE is true.\n   * @param {unknown[]} messages - The messages to log\n   */\n  logTraceCore(...messages: unknown[]): void {\n    // Validate log active\n    if (!LOG_ACTIVE) return;\n    // Redirect\n    this.#logLevel(LOG_TRACE_CORE, 'TRACE', 'dodgerblue', ...messages);\n  }\n\n  /**\n   * Logs debug information.\n   * Only shows if LOG_ACTIVE is true.\n   * @param {unknown[]} messages - The messages to log\n   */\n  logDebug(...messages: unknown[]): void {\n    // Validate log active\n    if (!LOG_ACTIVE) return;\n    // Redirect\n    this.#logLevel(LOG_DEBUG, 'DEBUG', 'darkorange', ...messages);\n  }\n\n  /**\n   * Starts a time marker using the given marker key. Used to log various specific execution timings.\n   * @param {string} markerKey - The unique key for this time marker\n   */\n  logMarkerStart(markerKey: string): void {\n    // Store the current date in the markers using the marker key\n    this.markers[markerKey] = new Date();\n  }\n\n  /**\n   * Logs the time difference between 'now' and the original marker start.\n   * Only shows if LOG_ACTIVE is true.\n   * Priority level is the same as LOG_DEBUG.\n   * @param {string} markerKey - The unique key for this execution timing marker\n   * @param {unknown[]} messages - The timing marker messages to log\n   */\n  logMarkerCheck(markerKey: string, ...messages: unknown[]): void {\n    // Validate log active and existing marker\n    if (!LOG_ACTIVE) return;\n    if (!this.markers[markerKey]) return;\n\n    // Calculate the time span between now and marked date\n    let timeSpan = new Date().getTime() - this.markers[markerKey].getTime();\n\n    const days = Math.floor(timeSpan / (1000 * 60 * 60 * 24));\n    timeSpan -= days * (1000 * 60 * 60 * 24);\n\n    const hours = Math.floor(timeSpan / (1000 * 60 * 60));\n    timeSpan -= hours * (1000 * 60 * 60);\n\n    const mins = Math.floor(timeSpan / (1000 * 60));\n    timeSpan -= mins * (1000 * 60);\n\n    const seconds = Math.floor(timeSpan / 1000);\n    timeSpan -= seconds * 1000;\n\n    // Let's say we always want seconds and milliseconds at least\n    let logMsg = `${seconds} seconds, and ${timeSpan} ms`;\n    if (mins) logMsg = `${mins} minutes, ${seconds} seconds, and ${timeSpan} ms`;\n    if (hours) logMsg = `${hours} hours, ${mins} minutes, ${seconds} seconds, and ${timeSpan} ms`;\n\n    // Redirect\n    this.#logLevel(LOG_DEBUG, 'MARKR', 'yellowgreen', logMsg, ...messages, `(${markerKey})`); // Not a typo, 5 characters for alignment\n  }\n\n  /**\n   * Starts logging object(s) at every `trackerInterval`ms. Used to track object(s) modification timings.\n   * Only shows if LOG_ACTIVE is true.\n   * Priority level is the same as LOG_DEBUG.\n   * @param {string} trackerKey - The unique key for this object(s) tracker\n   * @param {() => T} callbackObject - The callback executed to retrieve the object\n   * @param {(prevObject: T, newObject: T) => boolean} callbackCheck? - Optionally specify how the equality comparison should happen to decide if we want to log\n   * @param {number} interval? - Optionally specify an interval to call the callback for\n   */\n  logTrackerStart<T>(\n    trackerKey: string,\n    callbackObject: () => T,\n    callbackCheck?: (prevObject: T, newObject: T) => boolean,\n    interval?: number\n  ): void {\n    // Validate log active and existing tracker clearing\n    if (!LOG_ACTIVE) return;\n    if (this.trackers[trackerKey]) this.logTrackerStop(trackerKey);\n\n    // Calback right away to get the object on start\n    let object = callbackObject();\n\n    // Log right away for the first tracker to happen immediately\n    this.#logLevel(LOG_DEBUG, 'TRAKR', 'goldenrod', object, `(${trackerKey})`); // Not a typo, 5 characters for alignment\n\n    // Start the interval to check every few ms\n    this.trackers[trackerKey] = setInterval(() => {\n      // Calback to retrieve the object again\n      const newObject = callbackObject();\n\n      // Check if changed\n      let hasChanged = false;\n      if (callbackCheck) hasChanged = callbackCheck(object, newObject); // Use callback to know\n      else hasChanged = newObject !== object; // Use straight equality comparator\n\n      // If has changed\n      if (hasChanged) {\n        // Redirect\n        this.#logLevel(LOG_DEBUG, 'TRAKR', 'goldenrod', newObject, `(${trackerKey})`); // Not a typo, 5 characters for alignment\n      }\n\n      // Update reference\n      object = newObject;\n    }, interval || this.trackerInterval);\n  }\n\n  /**\n   * Stops the object(s) tracker for the given tracker key\n   * @param {string} trackerKey - The unique key for this object(s) tracker\n   */\n  logTrackerStop(trackerKey: string): void {\n    if (this.trackers[trackerKey]) {\n      clearInterval(this.trackers[trackerKey]);\n    }\n  }\n\n  /**\n   * Logs general flow of the application.\n   * Shows all the time.\n   * @param {unknown[]} messages - The messages to log\n   */\n  logInfo(...messages: unknown[]): void {\n    // Redirect\n    this.#logLevel(LOG_INFO, 'INFO ', 'green', ...messages); // Not a typo, 5 characters for alignment\n  }\n\n  /**\n   * Logs warnings coming from the application.\n   * Shows all the time.\n   * @param {unknown[]} messages - The messages to log\n   */\n  logWarning(...messages: unknown[]): void {\n    // Redirect\n    this.#warnLevel(LOG_WARNING, ...messages);\n  }\n\n  /**\n   * Logs errors coming from the application.\n   * Shows all the time.\n   * @param {unknown[]} messages - The messages to log\n   */\n  logError(...messages: unknown[]): void {\n    // Redirect\n    this.#errorLevel(LOG_ERROR, ...messages);\n  }\n\n  /**\n   * Compares the provided level (number) with the logging level (number | number[]) to know if the log should appear or not.\n   * @param {number} level - The level associated with the message to be logged.\n   * @returns {boolean} True if the log level indicates that it should appear\n   * @private\n   */\n  #checkLevel(level: number): boolean {\n    // If regular number\n    if (!isArray(this.loggingLevel)) return this.loggingLevel <= level;\n    // Is an array. We want the log to show DEBUG and higher and whatever levels (<20) are included in the array\n    return level >= LOG_DEBUG || this.loggingLevel.includes(level);\n  }\n\n  /**\n   * Checks that the level is greater or equal to the application logging level.\n   * If level is valid, logs using console.log().\n   * @param {number} level - The level associated with the message to be logged.\n   * @param {unknown[]} messages - The messages to log\n   * @private\n   */\n  #logLevel(level: number, header: string, color: keyof ColorCode, ...messages: unknown[]): void {\n    // If the configured logging level accepts to log the given level\n    // eslint-disable-next-line no-console\n    if (this.#checkLevel(level)) console.log(`%c${this.#formatTime(new Date())} ${header}`, `color: ${color}`, ...messages);\n  }\n\n  /**\n   * Checks that the level is greater or equal to the application logging level.\n   * If level is valid, logs using console.warn().\n   * @param {number} level - The level associated with the message to be logged.\n   * @param {unknown[]} messages - The messages to log\n   * @private\n   */\n  #warnLevel(level: number, ...messages: unknown[]): void {\n    // If the configured logging level accepts to log the given level\n    // eslint-disable-next-line no-console\n    if (this.#checkLevel(level)) console.warn(`${this.#formatTime(new Date())}`, ...messages);\n  }\n\n  /**\n   * Checks that the level is greater or equal to the application logging level.\n   * If level is valid, logs using console.error().\n   * @param {number} level - The level associated with the message to be logged.\n   * @param {unknown[]} messages - The messages to log\n   * @private\n   */\n  #errorLevel(level: number, ...messages: unknown[]): void {\n    // If the configured logging level accepts to log the given level\n    // eslint-disable-next-line no-console\n    if (this.#checkLevel(level)) console.error(`${this.#formatTime(new Date())}`, ...messages);\n  }\n\n  /**\n   * Helper function to format a time for logging.\n   * @param {Date} date - The date to format\n   * @returns {string} The formatted date\n   * @private\n   */\n  #formatTime(date: Date): string {\n    const options: Intl.DateTimeFormatOptions = {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false,\n    };\n\n    const formatter = new Intl.DateTimeFormat('en-US', options);\n    const formattedDate = formatter.format(date);\n\n    // Extract milliseconds separately and pad with zeros if needed\n    const milliseconds = date.getMilliseconds();\n    const formattedMilliseconds = milliseconds.toString().padStart(3, '0');\n\n    return `${formattedDate}.${formattedMilliseconds}`;\n  }\n}\n\n/**\n * The supported color codes for logging\n */\ntype ColorCode = {\n  turquoise: string;\n  grey: string;\n  plum: string;\n  orchid: string;\n  darkorchid: string;\n  mediumorchid: string;\n  royalblue: string;\n  cornflowerblue: string;\n  dodgerblue: string;\n  darkorange: string;\n  yellowgreen: string;\n  goldenrod: string;\n  green: string;\n};\n\n/**\n * A Log marker with various keys, used to log various specific execution timings\n */\ntype LogMarker = {\n  [key: string]: Date;\n};\n\n/**\n * A Log tracker with various keys, used to log and track object modifications accross execution timings\n */\ntype LogTracker = {\n  [key: string]: NodeJS.Timeout;\n};\n\n// Create a ConsoleLogger singleton and export it\nexport const logger = new ConsoleLogger(LOG_LEVEL);\nlogger.logInfo('Logger initialized');\n\n// Uncomment to test the logger main functions to see how they look in console\n// logger.logTraceDetailed('trace detailed');\n// logger.logTraceUseEffectUnmount('trace use effect unmount');\n// logger.logTraceRender('trace render');\n// logger.logTraceUseCallback('trace use callback');\n// logger.logTraceUseMemo('trace use memo');\n// logger.logTraceUseEffect('trace use effect');\n// logger.logTraceCoreStoreSubscription('trace store subscription');\n// logger.logTraceCoreAPIEvent('trace api event');\n// logger.logTraceCore('trace core');\n// logger.logDebug('debug');\n// logger.logMarkerStart('test time marker');\n// logger.logMarkerCheck('test time marker');\n// logger.logTrackerStart('test object tracker', () => undefined);\n// logger.logTrackerStop('test object tracker');\n// logger.logInfo('info');\n// logger.logWarning('warning');\n// logger.logError('error');\n"],"names":["getItemAsNumber","key","defaultValue","levelValue","localStorage","getItem","levelValueNumber","Number","isNaN","e","valueFromStorage","LOG_TRACE_DETAILED","LOG_TRACE_USE_EFFECT_UNMOUNT","LOG_TRACE_RENDER","LOG_TRACE_USE_CALLBACK","LOG_TRACE_USE_MEMO","LOG_TRACE_USE_EFFECT","LOG_TRACE_CORE_STORE_SUBSCRIPTION","LOG_TRACE_CORE_API_EVENT","LOG_TRACE_CORE","LOG_DEBUG","LOG_INFO","LOG_WARNING","LOG_ERROR","LOG_ACTIVE","LOG_LEVEL","includes","split","map","val","trim","filter","getItemAsNumberOrNumberArray","undefined","setItem","toString","_ConsoleLogger_brand","WeakSet","_checkLevel","level","_isArray","this","loggingLevel","_logLevel","header","color","_console","_len15","arguments","length","messages","Array","_key15","_assertClassBrand","call","console","log","apply","concat","_formatTime","Date","_warnLevel","_console2","_len16","_key16","warn","_errorLevel","_console3","_len17","_key17","error","date","formattedDate","Intl","DateTimeFormat","hour","minute","second","hour12","format","formattedMilliseconds","getMilliseconds","padStart","_createClass","ConsoleLogger","logLevel","_classCallCheck","_classPrivateMethodInitSpec","_defineProperty","value","_assertClassBrand2","_len","_key","useEffectFunction","_assertClassBrand3","_len2","_key2","component","_assertClassBrand4","_len3","_key3","useMemoFunction","_assertClassBrand5","_len4","_key4","useCallbackFunction","_assertClassBrand6","_len5","_key5","_assertClassBrand7","_len6","_key6","storeSubscription","_assertClassBrand8","_len7","_key7","apiEvent","_assertClassBrand9","_len8","_key8","_assertClassBrand10","_len9","_key9","_assertClassBrand11","_len10","_key10","markerKey","markers","_assertClassBrand12","timeSpan","getTime","Math","floor","hours","mins","seconds","logMsg","_len11","_key11","trackerKey","callbackObject","callbackCheck","interval","_this","trackers","logTrackerStop","object","setInterval","newObject","trackerInterval","clearInterval","_assertClassBrand13","_len12","_key12","_assertClassBrand14","_len13","_key13","_assertClassBrand15","_len14","_key14","logInfo"],"sourceRoot":""}